1. Verificar se o PostgreSQL está instalado e em execução
Antes de criar o banco de dados, você precisa garantir que o PostgreSQL está instalado e rodando. Isso pode ser verificado de duas formas:

a) Verificar se o serviço do PostgreSQL está ativo (Windows):
No Windows, o PostgreSQL é instalado como um serviço. Você pode verificar se ele está em execução com o seguinte comando no PowerShell ou CMD:

sc query postgresql-x64-15

Substitua postgresql-x64-15 pelo nome do serviço do PostgreSQL instalado no seu sistema. Se o serviço não estiver em execução, você pode iniciá-lo com:

net start postgresql-x64-15

2. Automatizar a Criação do Banco de Dados
Você pode criar um script (em Python, Shell, ou outra linguagem) que verifica se o banco de dados existe e, se não existir, cria o banco e as tabelas automaticamente.

Exemplo em Python:
Aqui está um exemplo de como você pode fazer isso em Python usando a biblioteca psycopg2 para se conectar ao PostgreSQL:

import psycopg2
from psycopg2 import sql

# Configurações de conexão
db_config = {
    'dbname': 'postgres',  # Conecta ao banco padrão 'postgres' inicialmente
    'user': 'postgres',
    'password': 'sua_senha',
    'host': 'localhost',
    'port': '5432'
}

# Nome do banco de dados que será criado
new_db_name = 'veterinaria_db'

# Conecta ao PostgreSQL
try:
    conn = psycopg2.connect(**db_config)
    conn.autocommit = True  # Necessário para criar bancos de dados
    cursor = conn.cursor()

    # Verifica se o banco de dados já existe
    cursor.execute(sql.SQL("SELECT 1 FROM pg_database WHERE datname = %s"), [new_db_name])
    if not cursor.fetchone():
        # Cria o banco de dados
        cursor.execute(sql.SQL("CREATE DATABASE {}").format(sql.Identifier(new_db_name)))
        print(f"Banco de dados '{new_db_name}' criado com sucesso.")
    else:
        print(f"Banco de dados '{new_db_name}' já existe.")

    # Conecta ao novo banco de dados
    db_config['dbname'] = new_db_name
    conn = psycopg2.connect(**db_config)
    cursor = conn.cursor()

    # Cria as tabelas (exemplo: tabela Tutores)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS Tutores (
            ID_Tutor SERIAL PRIMARY KEY,
            Nome VARCHAR(100) NOT NULL,
            Data_Nascimento DATE,
            Telefone VARCHAR(15),
            Endereço TEXT,
            Email VARCHAR(100)
        );
    """)
    print("Tabela 'Tutores' criada ou já existente.")

except Exception as e:
    print(f"Erro: {e}")
finally:
    if conn:
        cursor.close()
        conn.close()

Explicação:
O script tenta se conectar ao banco de dados padrão postgres.

Verifica se o banco de dados veterinaria_db já existe.

Se não existir, cria o banco de dados.

Conecta-se ao novo banco de dados e cria as tabelas necessárias.

3. Executar o Script na Primeira Execução do Programa
Você pode integrar esse script ao seu programa principal. Por exemplo, no início do seu programa em Python, você pode chamar uma função que verifica e cria o banco de dados:

def setup_database():
    # Coloque aqui o código do script acima
    pass

if __name__ == "__main__":
    setup_database()
    # Resto do seu programa


4. Automatizar a Inicialização do PostgreSQL
Se o PostgreSQL não estiver em execução, você pode tentar iniciá-lo automaticamente. Aqui estão algumas abordagens:

a) No Windows:
Você pode usar o comando net start para iniciar o serviço do PostgreSQL:

import os

def start_postgres_service():
    try:
        os.system('net start postgresql-x64-15')
        print("Serviço do PostgreSQL iniciado.")
    except Exception as e:
        print(f"Erro ao iniciar o PostgreSQL: {e}")

5. Empacotar Tudo em um Instalador
Para facilitar a vida do usuário, você pode empacotar seu programa com um instalador que:

Verifica se o PostgreSQL está instalado.

Inicia o PostgreSQL (se necessário).

Executa o script de criação do banco de dados.

Ferramentas como Inno Setup (Windows) ou PyInstaller (para criar executáveis Python) podem ser usadas para criar um instalador.

        